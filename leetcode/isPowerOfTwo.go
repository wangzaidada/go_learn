package main

// 231. 2 的幂
import "fmt"

// isPowerOfTwo 判断一个整数是否为2的幂
// 算法原理：如果一个数是2的幂，那么它的二进制表示中只有一个1，其余位都是0
// 例如：2^3 = 8 = 1000(二进制)，2^4 = 16 = 10000(二进制)
// 对于2的幂n，n-1的二进制表示中，n中为1的那一位在n-1中为0，其余位都是1
// 例如：8-1=7 = 0111(二进制)，16-1=15 = 01111(二进制)
// 因此 n & (n-1) = 0 当且仅当n是2的幂
// 参数: n - 要判断的整数
// 返回: true表示是2的幂，false表示不是2的幂
func isPowerOfTwo(n int) bool {
	// n > 0 确保n为正数（2的幂都是正数）
	// n & (n-1) == 0 使用位运算判断n是否为2的幂
	return n > 0 && n&(n-1) == 0
}

// main 主函数，演示isPowerOfTwo函数的使用
func main() {
	// 测试用例1：16是2的幂 (2^4 = 16)
	fmt.Println(isPowerOfTwo(16))
	// 测试用例2：15不是2的幂 (15 = 1111(二进制)，有4个1)
	fmt.Println(isPowerOfTwo(15))
	// 测试用例3：17不是2的幂 (17 = 10001(二进制)，有2个1)
	fmt.Println(isPowerOfTwo(17))
}
